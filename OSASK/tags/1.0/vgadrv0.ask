// "VGADRV0.ASK" ver.0.3 copyright(C) 2001 川合秀実, ODP

segment GapiMdl(USE32, PARA);

default(code == GapiMdl);

struct GAPI_WORK {
	int mouse_pattern[768 /* 0x0300 */];
	int pattern0_color;
	int pattern1_color;
	signed int mx, my, mx0, my0, mx1, my1;
//	int mouseline, masktype;
	int pattern0_addr;
	int pattern1_addr;
	int cursor_addr, backup_addr;
//	int p, q, b;
	int taskcount, nextcount;
	int VGA_mode;
	short V86CS, V86SS;
	char V86flag, mouseflag, maskflag, mouseline;
	unsigned int lockcount, mouselock;
};

// タスクごとに変化しうるVGAレジスタ
//  0x03CE
//   Set / Reset Reg(00)
//   Data Rotate / Function Select Reg(03)
//   Mode Reg(05)

// 固定レジスタ(注意すべきもの)
//  0x03C4
//   Map Mask Reg(02) == 0x0f
//  0x03CE
//   Enable Set / Reset Reg(01) == 0xff
//   Bit Mask Reg(08) == 0xff

//  数ドットうつ/フォントライト/マウスカーソル描画：
//    書き込みモード3
//    reg0(color), reg3(PSET:00, AND:08, OR:10, XOR: 18), reg5(03)

//  フィル/マウスカーソル待避：
//    書き込みモード1
//    reg5(01)

void far GAPI_entry()
// 必ず、EFLAGS.IF == 1で呼ぶこと
{
	goto syscmd;
	ORG(0x0008);
	ORG(0x0010);
	asmout("DD OFFSET #syscmd, 0, 0, 0");
	DD(4096); // 初期化時に必要なワークエリアサイズ
	DD(0); // 最大ローカルスタック消費量
	ORG(0x0040);
syscmd:
	GAPI_WORK *work == ES:0x0000;

	int all_sel == 1 * 8;
	int *cmd == FS:EBX;

	asmout("#GAPI_accesslock EQU GAPI_accesslock");
	asmout("#GAPI_mouse EQU GAPI_mouse");
	asmout("#GAPI_line EQU GAPI_line");
	asmout("#GAPI_fontwrite EQU GAPI_fontwrite");
	asmout("#GAPI_init EQU GAPI_init");
	asmout("#GAPI_VGA640 EQU GAPI_VGA640");
	asmout("#GAPI_resetdevice EQU GAPI_resetdevice");
	asmout("#GAPI_error EQU GAPI_error");

	PUSH(DS);
	PUSH(ES);
	PUSHAD();
	EAX = all_sel;
	CX = CS;
	DS = AX;
	CX += 8;
	ES = CX;

/*
	// for debug
	PUSHFD();
	POP(EAX);
	TEST(AH, 0x02);
	if (== 0) {
		STI();
		INT(0x03);
	}
*/

/*
	// taskcountを取得
	CLI();
	EAX = work->nextcount;
	EBP = EAX;
	EAX++;
	work->nextcount = EAX;
	STI();
*/

asmout("next_command:");

	EAX = cmd[0];
	if (EAX == 0x0184)
		goto GAPI_accesslock;
	if (EAX == 0x0101)
		goto GAPI_fontwrite;
	if (EAX == 0x0100)
		goto GAPI_line;
	if (EAX == 0x0180)
		goto GAPI_mouse;
	if (EAX == 0x0010)
		goto GAPI_init;
	if (EAX == 0x001c)
		goto GAPI_resetdevice;


	if (EAX != 0)
		goto GAPI_error;

	[SS:ESP + 16] = EBX;
	POPAD();
	POP(ES);
	POP(DS);
	return;
}

// マウスには非表示カウントというのがある
// これが0からnon-0になったときや、non-0から0になったときに、描画・待避を行なう

void near GAPI_fontwrite()
{
	// 8x16のフォントを描画(背景色付き)
	// 最高でも1,600バイトにしかアクセスしない
	// だから、CLIのまま突破

	int *cmd == FS:EBX;

	if (cmd[4] != 0)
		goto error;

	EDX = 0x03ce;
	EAX = 0x0305;
	CLI();
	OUT(DX, AX); // Mode Reg (writing mode : 3)
	EAX = 0x0003;
	OUT(DX, AX); // Data Rotate / Function Select Reg (PSET)
	EAX = cmd[16];
	EAX <<= 8;
	OUT(DX, AX); // Set / Reset Reg (color)

	EAX = cmd[ 8]; // x
	ESI = cmd[12]; // y
	TEST(AL, 0x07);
	if (!= 0)
		goto error; // 8の倍数以外はまだサポートしてない

	(unsigned int) EAX /= 8;
	IMUL(ESI, 100);
	ESI += EAX;

	int *font == ES:EDI;
	EAX = cmd[20]; // bgcolor
	ES = [FS:EBX + 28];
	// fontsizeチェックはしなくなった。その方が速い。
	// チェックが必要なら、上位ルーチンでやる。
	CL = [DS:EAX + 0xafff0]; // ラッチセット

	int *string == FS:EBP;
	ECX = cmd[32]; // length
	LEA((offset) string, [EBX + 36]);
	LEA(EBX, [EBX + ECX * 4 + 36]);

	do {
		(offset) font = *string;
		(offset) string += 4;
		EAX = font[ 0]; // 4lines
		(char) [DS:ESI + 0xa0000 + 100 *  0] = AL;
		(char) [DS:ESI + 0xa0000 + 100 *  1] = AH;
		(unsigned int) EAX >>= 16;
		(char) [DS:ESI + 0xa0000 + 100 *  2] = AL;
		(char) [DS:ESI + 0xa0000 + 100 *  3] = AH;
		EAX = font[ 4]; // 4lines
		(char) [DS:ESI + 0xa0000 + 100 *  4] = AL;
		(char) [DS:ESI + 0xa0000 + 100 *  5] = AH;
		(unsigned int) EAX >>= 16;
		(char) [DS:ESI + 0xa0000 + 100 *  6] = AL;
		(char) [DS:ESI + 0xa0000 + 100 *  7] = AH;
		EAX = font[ 8]; // 4lines
		(char) [DS:ESI + 0xa0000 + 100 *  8] = AL;
		(char) [DS:ESI + 0xa0000 + 100 *  9] = AH;
		(unsigned int) EAX >>= 16;
		(char) [DS:ESI + 0xa0000 + 100 * 10] = AL;
		(char) [DS:ESI + 0xa0000 + 100 * 11] = AH;
		EAX = font[12]; // 4lines
		(char) [DS:ESI + 0xa0000 + 100 * 12] = AL;
		(char) [DS:ESI + 0xa0000 + 100 * 13] = AH;
		(unsigned int) EAX >>= 16;
		(char) [DS:ESI + 0xa0000 + 100 * 14] = AL;
		(char) [DS:ESI + 0xa0000 + 100 * 15] = AH;
		ESI++;
		ECX--;
	} while (!= 0);
	STI();
	AX = CS;
	AX += 8;
	ES = AX;
	asmout("JMP next_command");

error:
	STI();
	INT(0x03);
}

void near yline()
// AL:パターン, ESIから(ECX + 1)回。CLI();した状態で呼び出す。
// DL, ESI(直下のアドレス), ECX(= 0)を破壊。
{
	ECX -= 7;
	if ((unsigned) >= 0) {
		do {
			DL = [DS:ESI + 0 * 100];
			[DS:ESI + 0 * 100] = AL;
			DL = [DS:ESI + 1 * 100];
			[DS:ESI + 1 * 100] = AL;
			DL = [DS:ESI + 2 * 100];
			[DS:ESI + 2 * 100] = AL;
			DL = [DS:ESI + 3 * 100];
			[DS:ESI + 3 * 100] = AL;
			DL = [DS:ESI + 4 * 100];
			[DS:ESI + 4 * 100] = AL;
			DL = [DS:ESI + 5 * 100];
			[DS:ESI + 5 * 100] = AL;
			DL = [DS:ESI + 6 * 100];
			[DS:ESI + 6 * 100] = AL;
			DL = [DS:ESI + 7 * 100];
			[DS:ESI + 7 * 100] = AL;
			ESI += 800;
			ECX -= 8;
		} while ((unsigned) >= 0);
	}
	ECX += 8;
	if (!= 0) {
		do {
			DL = [DS:ESI];
			[DS:ESI] = AL;
			ESI += 100;
			ECX--;
		} while (!= 0);
	}
	return;
}

void near xline_pset()
{
	ECX -= 8;
	if ((unsigned) >= 0) {
		do {
			[DS:ESI + 0] = AL;
			[DS:ESI + 1] = AL;
			[DS:ESI + 2] = AL;
			[DS:ESI + 3] = AL;
			[DS:ESI + 4] = AL;
			[DS:ESI + 5] = AL;
			[DS:ESI + 6] = AL;
			[DS:ESI + 7] = AL;
			ESI += 8;
			ECX -= 8;
		} while ((unsigned) >= 0);
	}
	ECX += 8;
	if (!= 0) {
		do {
			[DS:ESI] = AL;
			ESI++;
			ECX--;
		} while (!= 0);
	}
	return;
}

void near xline()
// AL:パターン, ESIからECX回。CLI();した状態で呼び出す。
// DL, ESI(直下のアドレス), ECX(= 0)を破壊。
{
	ECX -= 8;
	AL = 0xff;
	if ((unsigned) >= 0) {
		do {
			DL = [DS:ESI + 0];
			[DS:ESI + 0] = AL;
			DL = [DS:ESI + 1];
			[DS:ESI + 1] = AL;
			DL = [DS:ESI + 2];
			[DS:ESI + 2] = AL;
			DL = [DS:ESI + 3];
			[DS:ESI + 3] = AL;
			DL = [DS:ESI + 4];
			[DS:ESI + 4] = AL;
			DL = [DS:ESI + 5];
			[DS:ESI + 5] = AL;
			DL = [DS:ESI + 6];
			[DS:ESI + 6] = AL;
			DL = [DS:ESI + 7];
			[DS:ESI + 7] = AL;
			ESI += 8;
			ECX -= 8;
		} while ((unsigned) >= 0);
	}
	ECX += 8;
	if (!= 0) {
		do {
			DL = [DS:ESI];
			[DS:ESI] = AL;
			ESI++;
			ECX--;
		} while (!= 0);
	}
	return;
}

void near GAPI_line()
{
	int *cmd == FS:EBX;

	EAX = cmd[4]; // opt
	TEST(EAX, 0xffffff0f);
	if (!= 0)
		goto error;

	ECX = EAX;
	EAX <<= 5 /* 8 - 3 */;
	AH &= 0x18;
	AL = 0x03;
	PUSH(EAX); // reg03
	ECX &= 0x0030;
	if (== 0)
		goto line;

	if (ECX == 0x0020) {
		// boxfill
		EBP = cmd[20]; // y1
		ESI = cmd[12]; // y0
		EBP -= ESI;
		IMUL(ESI, 100);
boxfill:
		EAX = 0x80ff;
		EDX = cmd[ 8]; // x0
		EDI = cmd[16]; // x1
		ECX = EDX;
		(unsigned int) EDX /= 8;
		ECX &= 0x07;
	//	ESI += EDX + 0xa0000;
		LEA(ESI, [ESI + EDX + 0xa0000]);
		(unsigned char) AL >>= CL;
		ECX = EDI;
		(unsigned int) EDI /= 8;
		ECX &= 0x07;
		if (ECX == 0x07) {
			EDI++;
		}
		(signed char) AH >>= CL;
		ECX = cmd[24];
		PUSH((offset) cmd);
		ECX <<= 8;
		EDI -= EDX;
		PUSH(ECX); // color * 256
		PUSH(EAX); // パターン
		// EDI : x方向のサイズ(バイト数)
		// EBP : y方向のサイズ(ドット数 - 1)
		// ESI : VRAM上のアドレス
		if ((unsigned) >) {
			if (AL != 0xff) {
				ECX = EBP;
				EDX = 0x03ce;
				EAX = 0x0305;
				EBX = ESI;
				CLI();
				OUT(DX, AX); // Mode Reg (writing mode : 3)
				EAX = [SS:ESP + 12];
				OUT(DX, AX); // Data Rotate / Function Select Reg
				EAX = [SS:ESP + 4];
				OUT(DX, AX); // Set / Reset Reg (color)
				AL = [SS:ESP];
				yline();
				STI();
				EDI--;
				LEA(ESI, [EBX + 1]);
				if (== 0)
					goto last_block;
			}
			// EDI > 0
			if (EBP >= 7) {
				if ((unsigned) (char) [SS:ESP + 13] == 0) {
					EBX = (unsigned char) [SS:ESP + 5];
					EDX = 0x03ce;
					EBX |= 0xafff0;
					do {
						EAX = 0x0105;
						CLI();
						OUT(DX, AX); // Mode Reg (writing mode : 1)
						CL = [DS:EBX]; // ラッチ更新
					//	ECX = EBP;
						EAX = ESI;
					//	ECX -= 7;
						LEA(ECX, [EBP - 7]);
					//	if ((unsigned) >= 0) {
							do {
								[DS:ESI + 0 * 100] = AL;
								[DS:ESI + 1 * 100] = AL;
								[DS:ESI + 2 * 100] = AL;
								[DS:ESI + 3 * 100] = AL;
								[DS:ESI + 4 * 100] = AL;
								[DS:ESI + 5 * 100] = AL;
								[DS:ESI + 6 * 100] = AL;
								[DS:ESI + 7 * 100] = AL;
								ESI += 800;
								ECX -= 8;
							} while ((unsigned) >= 0);
					//	}
						ECX += 8;
						if (!= 0) {
							do {
								[DS:ESI] = AL;
								ESI += 100;
								ECX--;
							} while (!= 0);
						}
						STI();
						LEA(ESI, [EAX + 1]);
						EDI--;
					} while (!= 0);
				} else {
					do {
						ECX = EBP;
						EDX = 0x03ce;
						EAX = 0x0305;
						EBX = ESI;
						CLI();
						OUT(DX, AX); // Mode Reg (writing mode : 3)
						EAX = [SS:ESP + 12];
						OUT(DX, AX); // Data Rotate / Function Select Reg
						EAX = [SS:ESP + 4];
						OUT(DX, AX); // Set / Reset Reg (color)
						AL = 0xff;
						yline();
						STI();
						EDI--;
						LEA(ESI, [EBX + 1]);
					} while (!= 0);
				}
			} else {
				PUSH(EBP);
				EBP++;
				PUSH(ESI);
				if ((unsigned) (char) [SS:ESP + 13 + 8] == 0) {
					EBX = (unsigned char) [SS:ESP + 5 + 8];
					EDX = 0x03ce;
					EBX |= 0xafff0;
					do {
						EAX = 0x0105;
						CLI();
						OUT(DX, AX); // Mode Reg (writing mode : 1)
						CL = [DS:EBX]; // ラッチ更新
						ECX = EDI;
						EAX = ESI;
						xline_pset();
						STI();
						EBP--;
						LEA(ESI, [EAX + 100]);
					} while (!= 0);
				} else {
					do {
						ECX = EDI;
						EDX = 0x03ce;
						EAX = 0x0305;
						EBX = ESI;
						CLI();
						OUT(DX, AX); // Mode Reg (writing mode : 3)
						EAX = [SS:ESP + 12 + 8];
						OUT(DX, AX); // Data Rotate / Function Select Reg
						EAX = [SS:ESP + 4 + 8];
						OUT(DX, AX); // Set / Reset Reg (color)
						xline();
						STI();
						EBP--;
						LEA(ESI, [EBX + 100]);
					} while (!= 0);
				}
				POP(ESI);
				POP(EBP);
				ESI += EDI;
			}
	last_block:
			CL = [SS:ESP + 1];
			if (CL == 0xff)
				goto fin;
	last:
			EDX = 0x03ce;
			EAX = 0x0305;
			CLI();
			OUT(DX, AX); // Mode Reg (writing mode : 3)
			EAX = [SS:ESP + 12];
			OUT(DX, AX); // Data Rotate / Function Select Reg
			EAX = [SS:ESP + 4];
			OUT(DX, AX); // Set / Reset Reg (color)
			AL = CL;
			ECX = EBP;
			yline();
			STI();

	fin:
			(offset) cmd = [SS:ESP + 8];
			ESP += 16;
			(offset) cmd += 28;
			asmout("JMP next_command");
		} else {
			// EDX == EDI
			AL &= AH;
			CL = AL;
			goto last;
		}
	}

	// box
	EBP = cmd[20]; // y1
	ESI = cmd[12]; // y0
	EBP -= ESI;
	IMUL(ESI, 100);
	if ((unsigned) EBP <= 1)
		goto boxfill;
	EDX = cmd[ 8]; // x0
	EDI = cmd[16]; // x1
	ECX = EDX;
	(unsigned int) EDX /= 8;
	EAX = 0x008000ff;
	ECX &= 0x07;
//	ESI += EDX + 0xa0000;
	LEA(ESI, [ESI + EDX + 0xa0000]);
//	(unsigned int) EAX >>= CL;
	SHR(EAX, CL);
	ECX = EDI;
	(unsigned int) EDI /= 8;
	PUSH(EAX);
	ECX &= 0x07;
	EAX = 0x80008000;
	EBP -= 2;
//	(signed int) EAX >>= CL;
	SAR(EAX, CL);
	ECX = cmd[24];
	ROR(EAX, 16);
	ECX <<= 8;
	EAX |= [SS:ESP];
//	PUSH((offset) cmd);
	EDI -= EDX;
	[SS:ESP] = (offset) cmd;
	PUSH(ECX); // color * 256
	ECX = EBP;
	EDX = 0x03ce;
	PUSH(EAX); // パターン
	EAX = 0x0305;
	EBX = ESI;
	CLI();
	OUT(DX, AX); // Mode Reg (writing mode : 3)
	EAX = [SS:ESP + 12];
	OUT(DX, AX); // Data Rotate / Function Select Reg
	EAX = [SS:ESP + 4];
	OUT(DX, AX); // Set / Reset Reg (color)
	EAX = [SS:ESP];
	if ((unsigned) >) {
		DL = [DS:ESI];
		[DS:ESI] = AL;
		ESI += 100;
		ROR(EAX, 16);
		yline();
		ROL(EAX, 16);
		DL = [DS:ESI];
		[DS:ESI] = AL;
	//	ESI = EBX + EDI;
		LEA(ESI, [EBX + EDI]);
	//	EAX = [SS:ESP];
		DL = [DS:ESI];
		[DS:ESI] = AH;
		ESI += 100;
		ECX = EBP;
		ROR(EAX, 24);
		yline();
		ROL(EAX, 16);
		DL = [DS:ESI];
		[DS:ESI] = AL;
		STI();
		LEA(ESI, [EBX + 1]);

		EDI--;
		if (== 0)
			goto fin;
		EBP += 2;
		EDX = 0x03ce;
		IMUL(EBP, 100);
		if ((unsigned) (char) [SS:ESP + 13] == 0) {
			EBX = (unsigned char) [SS:ESP + 5];
			EAX = 0x0105;
			EBX |= 0xafff0;
			CLI();
			OUT(DX, AX); // Mode Reg (writing mode : 1)
			CL = [DS:EBX]; // ラッチ更新
			ECX = EDI;
			EAX = ESI;
			xline_pset();
			LEA(ESI, [EAX + EBP]);
			ECX = EDI;
			xline_pset();
			STI();
			goto fin;
		} else {
			ECX = EDI;
			EAX = 0x0305;
			EBX = ESI;
			CLI();
			OUT(DX, AX); // Mode Reg (writing mode : 3)
			EAX = [SS:ESP + 12];
			OUT(DX, AX); // Data Rotate / Function Select Reg
			EAX = [SS:ESP + 4];
			OUT(DX, AX); // Set / Reset Reg (color)
			xline();
			LEA(ESI, [EBX + EBP]);
			ECX = EDI;
			xline();
			STI();
			goto fin;
		}
	}
	// EDI == 0
	EAX = [SS:ESP];
	AL &= AH;
	DL = [DS:ESI];
	[DS:ESI] = AL;
	ESI += 100;
	ROR(EAX, 16);
	AL |= AH;
	yline();
	ROL(EAX, 16);
	DL = [DS:ESI];
	[DS:ESI] = AL;
	STI();
	goto fin;

line:
	POP(EAX);
	(offset) cmd += 28;
	asmout("JMP next_command");
error:
	INT(0x03);
}

void near GAPI_removemouse();
void near GAPI_putmouse();
void near GAPI_clippingmouse();

void near GAPI_mouse()
// option:bit0  直接指定(0)/間接指定(1)
// option:bit5,4  16x16(00)/32x31(01)
// option:bit7,6  マスクパターンありのモノクロ(00),マスクパターンありのカラー(10)
// option:bit9,8  カーソルパターンストア(00),カーソル表示(01),カーソル消去(10),カーソル移動(11)
//   01,11では、カーソル座標を指定する。このコマンドでは、マウスカーソルは一つしか制御できない。
//   デフォルトでは、マウスカーソルと他のグラフィックコマンドとの関係を解消したりもしない。
{
	int *cmd == FS:EBX;
	GAPI_WORK *work == ES:0x0000;

	cmd[4] = 0xffffffff; // コマンド終了
	EAX = cmd[8];
	CLI();
	TEST(AH, 0x02);
	if (!= 0) {
		// カーソルを消す
		if (work->mouseflag != 0) {
			GAPI_removemouse(); // remove mouse (mouseflag = 0)
			EAX = cmd[8];
		}
		TEST(AH, 0x01);
		if (== 0)
			work->mx1 = 0x80000000; // 非表示モード
	}
	TEST(AH, 0x01);
	if (!= 0) {
		// カーソルを描く
		ECX = cmd[12];
		EDX = cmd[16];
		work->mx = ECX;
		work->my = EDX;
		if (work->lockcount == 0) {
			GAPI_clippingmouse(); // mx0, my0, mx1, my1を設定
			GAPI_putmouse(); // put mouse (mouseflag = 1)
		} else {
			work->mouselock = 0x80000000;
		}
		STI();
		(offset) cmd += 20;
		asmout("JMP next_command");
	}
	STI();
	(offset) cmd += 12;
	asmout("JMP next_command");
}

void near GAPI_init_sub();

void near GAPI_init()
{
	int all_sel == 1 * 8;
	int *cmd == FS:EBX;

	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 12;

	GAPI_WORK *work == DS:0x0000, *workES == ES:0x0000;

	int *cursor0 == CS:ESI; // [y][x]
	char *cursor_buf == DS:EDI; // [x][y]

	AX = ES;
	asmout("MOV ESI,OFFSET #mouse_cursor");
	DS = AX;
	(offset) cursor_buf = 0; // LEA((offset) cursor_buf, work->mouse_pattern[0]);
	EDX = 0;

	CLI();
	GAPI_init_sub(); // (offset) cursor_buf += 16, (offset) cursor0 += 32 される

//	asmout("MOV ESI,OFFSET #mouse_cursor+32");
	(offset) cursor_buf += 32; // LEA((offset) cursor_buf, work->mouse_pattern[0x0030]);

	GAPI_init_sub();

	char *base == DS:ESI, *shift == DS:EDI;

	(offset) base = 0; // LEA((offset) base, work->mouse_pattern[0]);
	LEA((offset) shift, [ESI + 96]); // LEA((offset) shift, work->mouse_pattern[0x0060]);
	/* EBP = 7 * 2; */ LEA(EBP, [ESI + 14]);

	// ずらしパターンの用意
	do {
		ECX = 16;
		do {
			AL = base[ 0];
			(unsigned char) AL >>= 1;
			DL = base[16];
			shift[ 0] = AL;
			RCR(DL, 1);
			AL = base[32];
			shift[16] = DL;
			RCR(AL, 1);
			(offset) base++;
			shift[32] = AL;
			(offset) shift++;
			ECX--;
		} while (!= 0);
		(offset) base += 32;
		(offset) shift += 32;
		EBP--;
	} while (!= 0);

	EAX = all_sel;
	work->pattern0_color =  0 * 256;
	work->pattern1_color = 15 * 256;
	work->mx1 = 0x80000000; // 非表示
	work->backup_addr = 0xa0000 + 800 * 600 / 8; // 画面外
	work->taskcount = /* 0 */ ECX;
	work->lockcount = /* 0 */ ECX;
	work->mouselock = /* 0 */ ECX;
	work->VGA_mode = /* 0 */ ECX;
	work->mouseflag = /* 0 */ CL;
	ECX++;
	work->nextcount = /* 1 */ ECX;
/*
	EAX = syswork_sel;
	DS = AX;
	EAX = [DS:32 + bootseg_ent + 12];
	ECX = [DS:32 + stack000_ent + 12];
	(unsigned int) EAX >>= 4; // bootseg_ent
	(unsigned int) ECX >>= 4; // stack000_ent
	workES->V86CS = AX;
	workES->V86SS = CX;
*/

	STI();
//	EBP++; // EBP = 1;
	DS = AX;
	asmout("JMP next_command");

	// デフォルトマウスカーソルパターン(16x16, mono)
	ALIGN(4);
mouse_cursor:
	asmout("DB 11000000B,00000000B");
	asmout("DB 10100000B,00000000B");
	asmout("DB 10010000B,00000000B");
	asmout("DB 10001000B,00000000B");
	asmout("DB 10000100B,00000000B");
	asmout("DB 10000010B,00000000B");
	asmout("DB 10000001B,00000000B");
	asmout("DB 10000000B,10000000B");
	asmout("DB 10000011B,00000000B");
	asmout("DB 10000100B,00000000B");
	asmout("DB 10100010B,00000000B");
	asmout("DB 11010010B,00000000B");
	asmout("DB 00001001B,00000000B");
	asmout("DB 00001001B,00000000B");
	asmout("DB 00000100B,10000000B");
	asmout("DB 00000011B,00000000B");

	asmout("DB 00000000B,00000000B");
	asmout("DB 01000000B,00000000B");
	asmout("DB 01100000B,00000000B");
	asmout("DB 01110000B,00000000B");
	asmout("DB 01111000B,00000000B");
	asmout("DB 01111100B,00000000B");
	asmout("DB 01111110B,00000000B");
	asmout("DB 01111111B,00000000B");
	asmout("DB 01111100B,00000000B");
	asmout("DB 01111000B,00000000B");
	asmout("DB 01011100B,00000000B");
	asmout("DB 00001100B,00000000B");
	asmout("DB 00000110B,00000000B");
	asmout("DB 00000110B,00000000B");
	asmout("DB 00000011B,00000000B");
	asmout("DB 00000000B,00000000B");
}

void near GAPI_init_sub()
{
	int *cursor0 == CS:ESI; // [y][x]
	char *cursor_buf == DS:EDI; // [x][y]

	ECX = 4;
	do {
		// 1loop当たり、4lines
		EAX = cursor0[0]; // 2lines
		cursor_buf[ 0] = AL;
		cursor_buf[16] = AH;
		(unsigned int) EAX >>= 16;
		cursor_buf[ 1] = AL;
		cursor_buf[17] = AH;
		EAX = cursor0[4]; // 2lines
		(offset) cursor0 += 8;
		cursor_buf[ 2] = AL;
		cursor_buf[18] = AH;
		(unsigned int) EAX >>= 16;
		cursor_buf[ 3] = AL;
		cursor_buf[19] = AH;
	//	cursor_buf[32] = EDX;
		[DS:EDI + 32] = EDX;
		(offset) cursor_buf += 4;
		ECX--;
	} while (!= 0);
	return;
}

void near GAPI_resetdevice()
{
	asmout("#GAPI_VGA640 EQU GAPI_VGA640");

	GAPI_WORK *work == ES:0x0000;
	int *cmd == FS:EBX;

	if (cmd[8] == 0x0020)
		goto GAPI_VGA640;

	EDX = 0x03c4;
	EAX = 0x0f02; // Map Mask Reg = 0x0f
	CLI();
	OUT(DX, AX);

	// VRAM上の横幅を800ドットに
	/* EDX = 0x03d4 */ EDX += 0x03d4 - 0x03c4;
	EAX = 0x3213; // Offset Reg = 0x32;
	OUT(DX, AX);

	/* EDX = 0x03ce */ EDX += 0x03ce - 0x03d4;
	EAX = /* 0x0000 */ 0; // Set / Reset Reg = 0x00(all-plane-off)
	OUT(DX, AX);
	EAX = 0x0f01; // Enable Set / Reset Reg = 0x0f;  固定
	OUT(DX, AX);
	EAX = 0x0003; // Data Rotate / Function Select Reg = 0x00(pset)
	OUT(DX, AX);
	EAX = 0x0305; // Mode Reg = 0x03
	OUT(DX, AX);
	EAX = 0xff08; // Bit Mask Reg = 0xff;  固定
	OUT(DX, AX);

	// ラッチの高速更新のための初期化
	EAX = 0; // Set / Reset Reg(color)
	ESI = 0xafff0;
	/* ECX = 16 */ LEA(ECX, [EAX + 16]);
	do {
		OUT(DX, AX);
		(char) [DS:ESI] = 0xff;
		ESI++;
		AH++;
		ECX--;
	} while (!= 0);
	STI();

	// パレット初期化
	EDX = 0x03da;
	ECX = 0;
	CLI();
	IN(AL, DX);
	DL = 0xc0;
	do {
		EAX = ECX;
		OUT(DX, AL);
		ECX++;
		OUT(DX, AL);
	} while ((unsigned) ECX < 16);
	DL = 0xda;
	IN(AL, DX);
	DL = 0xc0;
	AL = 0x20;
	OUT(DX, AL);

	DL = 0xc8;
	EAX = 0;
	ECX = 16;
	OUT(DX, AL); // 最初のパレット番号
	unsigned char *pt == CS:ESI, rgb_dat == AL;
	/* (offset) pt = (offset) palette_table; */
	asmout("MOV ESI,OFFSET #palette_table");
	DL = 0xc9;
	do {
		rgb_dat = pt[0];
		rgb_dat /= 4; // 0〜255 → 0〜63
		OUT(DX, rgb_dat);
		rgb_dat = pt[1];
		rgb_dat /= 4; // 0〜255 → 0〜63
		OUT(DX, rgb_dat);
		rgb_dat = pt[2];
		rgb_dat /= 4; // 0〜255 → 0〜63
		OUT(DX, rgb_dat);
		(offset) pt += 3;
		ECX--;
	} while (!= 0);

	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 12;
	asmout("JMP next_command");

palette_table: // Red, Green, Blue
	// 0:黒, 7:暗い灰色, 8:明るい灰色, 6:バックの色, 15:白

	asmout("DB 000H, 000H, 000H,   084H, 000H, 000H,   000H, 084H, 000H,   084H, 084H, 000H");
	asmout("DB 000H, 000H, 084H,   084H, 000H, 084H,   000H, 084H, 084H,   084H, 084H, 084H");
	asmout("DB 0C6H, 0C6H, 0C6H,   0FFH, 000H, 000H,   000H, 0FFH, 000H,   0FFH, 0FFH, 000H");
	asmout("DB 000H, 000H, 0FFH,   0FFH, 000H, 0FFH,   000H, 0FFH, 0FFH,   0FFH, 0FFH, 0FFH");
}

/*
void near GAPI_setmode()
// 001c, 0020, priority, mode(00, 12, 92, 6a, ea, 0102, 8102)
{
      0004 : デバイスリセット（ハードウェアコネクト）


}

void near GAPI_disconnect()
{

}
*/

void near GAPI_error()
{
	INT(0x03);
}

struct PARAM_VGA640 {
	char gene[5];
	char sequ[5];
	char crtc[25];
	char grac[9];
	char attr[21];
	char picmask;
};

void near GAPI_VGA640()
// ハードウェア別特別コマンド(0x001c, pri, 0x0020)
{
	// 初期バージョン作成 ODP
	// ASKAへの移植＆改変 川合秀実

	int all_sel == 1 * 8;
	int *cmd == FS:EBX;

	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 12;

	char *param == DS:ESI;
	asmout("MOV ESI,OFFSET #param640");

	AX = CS;
	DS = AX;

	EDX = 0x03c4;
	EAX = 0x0100;
	CLI();
	OUT(DX, AX); // まず、変更を受け付けさせるために、同期リセット

	AL = param[0];
	DL = 0xc2;
	OUT(DX, AL);
	AL = param[3];
	DL = 0xca;
	OUT(DX, AL);
	AL = param[4];
	DL = 0xc3;
	OUT(DX, AL);
	(offset) param += 5;

	AL = 1;
	(offset) param++; // sequ[0]を読み飛ばす
	DL = 0x0c4;
	do {
		AH = *param;
		(offset) param++;
		OUT(DX, AX);
		AL++;
	} while (AL != 5);
	EAX = 0x0300;
	OUT(DX, AX); // 飛ばしたreg00をセット

	DL = 0xd4;
	EAX = 0x2011;
	OUT(DX, AX); // reg00〜reg07 write enable
	EAX = 0;
	do {
		AH = *param;
		(offset) param++;
		OUT(DX, AX);
		AL++;
	} while (AL != 25);

	EAX = 0;
	DL = 0xce;
	do {
		AH = *param;
		(offset) param++;
		OUT(DX, AX);
		AL++;
	} while (AL != 9);

	ECX = 0;
	DL = 0xda;
	IN(AL, DX); // dummy read
	DL = 0xc0;
	do {
		EAX = ECX;
		ECX++;
		OUT(DX, AL);
		AL = *param;
		(offset) param++;
		OUT(DX, AL);
	} while (ECX != 21);
	DL = 0xda;
	IN(AL, DX); // dummy read
	AL = 0x20;
	OUT(DX, AL);

	DL = 0xc6;
	AL = *param;
//	(offset) param++;
	OUT(DX, AL);

	STI();
	EAX = all_sel;
	DS = AX;
	asmout("JMP next_command");

	ALIGN(4);
param640:
	asmout("DB 0E3H,070H,005H,000H,001H");

	asmout("DB 001H,001H,00FH,000H,006H");

	asmout("DB 05FH,04FH,050H,082H,054H,080H,00BH,03EH");
	asmout("DB 000H,040H,000H,000H,000H,000H,000H,000H");
	asmout("DB 0EAH,08CH,0DFH,032H,000H,0E7H,004H,0E3H");
	asmout("DB 0FFH");

	asmout("DB 000H,000H,000H,000H,000H,000H,005H,00FH");
	asmout("DB 0FFH");

	asmout("DB 000H,001H,002H,003H,004H,005H,014H,007H");
	asmout("DB 038H,039H,03AH,03BH,03CH,03DH,03EH,03FH");
	asmout("DB 001H,000H,00FH,000H,000H");

	asmout("DB 0FFH");
}

void near GAPI_accesslock()
// opt bit0  0:Lock 1:Unlock
//     bit1  Lock時のオプション   0:nearポインタあり 1:なし
//           Unlock時のオプション 0:範囲指定なし 1:あり
//     bit8-31  Unlock-opt
{
	int *cmd == FS:EBX;
	GAPI_WORK *work == ES:0x0000;

	EAX = cmd[8]; // opt
#if 0
	// 時々マウスが消えてしまうので、一時的にアルゴリズムを簡略化
	TEST(AL, 0x01);
	if (== 0) {
		// lock
		CLI();
		if (work->lockcount == 0) {
			// 範囲に関係なく、マウスを消す
			if (work->mouseflag != 0) {
				GAPI_removemouse(); // remove mouse (mouseflag = 0)
			}
		}
		work->lockcount++;
		STI();
		EAX = cmd[8]; // opt
		(offset) cmd += 28;
		if (AL == 0) {
			(offset) cmd += 4;
		}
		asmout("JMP next_command");
	}

	// unlock
	CLI();
	work->lockcount--;
	if (== 0) {
		if (work->mx1 != 0x80000000 /* mx1がこの値の時は、非表示を意味する */) {
			GAPI_clippingmouse(); // mx0, my0, mx1, my1を設定
			GAPI_putmouse(); // put mouse (mouseflag = 1)
		}
	}
	STI();
	EAX = cmd[8]; // opt
	if (AL == 1) {
		(offset) cmd += 12;
		asmout("JMP next_command");
	}
	(offset) cmd += 28;
	asmout("JMP next_command");

////////////////////////////////////////////////////////////////////////////////
#endif

	if (AL == 0)
		goto lock_bitset;
	if (AL == 0x02)
		goto lock_bitnoset;
	if (AL == 0x01)
		goto unlock_optbit;
	if (AL == 0x03)
		goto unlock_area;
	INT(0x03);

lock_bitset:
	EAX = cmd[12]; // x0
	ECX = cmd[16]; // y0
	ESI = cmd[20]; // x1
	EDI = cmd[24]; // y1
	EBP = cmd[28]; // ofs
	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 32;
	CLI();
	work->lockcount++;
	if ((signed) EAX /* x0 */ < work->mx1) {
		if ((signed) ECX /* y0 */ < work->my1) {
			if ((signed) ESI /* x1 */ > work->mx0) {
				if ((signed) EDI /* y1 */ > work->my0) {
					if (work->mouseflag != 0) {
						GAPI_removemouse(); // remove mouse (mouseflag = 0)
					}
					work->mouselock++;
					(char) [FS:EBP + 1] |= 0x01; // mouse
				}
			}
		}
	}
	STI();
	asmout("JMP next_command");

lock_bitnoset:
	EAX = cmd[12]; // x0
	ECX = cmd[16]; // y0
	ESI = cmd[20]; // x1
	EDI = cmd[24]; // y1
	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 28;
	CLI();
	work->lockcount++;
	if ((signed) EAX /* x0 */ < work->mx1) {
		if ((signed) ECX /* y0 */ < work->my1) {
			if ((signed) ESI /* x1 */ > work->mx0) {
				if ((signed) EDI /* y1 */ > work->my0) {
					if (work->mouseflag != 0) {
						GAPI_removemouse(); // remove mouse (mouseflag = 0)
					}
					work->mouselock++;
				}
			}
		}
	}
	STI();
	asmout("JMP next_command");

unlock_optbit:
	CLI();
	work->lockcount--;
	if (!= 0) {
		TEST(AH, 0x01);
		if (!= 0) {
			work->mouselock--;
			if (== 0) {
				// マウスを移動させる時に、mouselockが0x80000000にされるので、
				// マウスが非表示中に移動すると、これは成立しなくなる。
				GAPI_putmouse(); // put mouse (mouseflag = 1)
				// mx1をチェックしなくていいのか？
			}
		}
		STI();
		cmd[4] = 0xffffffff; // 終了
		(offset) cmd += 12;
		asmout("JMP next_command");
	}
	work->mouselock = 0;
	if (work->mx1 != 0x80000000 /* mx1がこの値の時は、非表示を意味する */) {
		if (work->mouseflag == 0 /* mouse erased */) {
			GAPI_clippingmouse(); // mx0, my0, mx1, my1を設定
			GAPI_putmouse(); // put mouse (mouseflag = 1)
		}
	}
	STI();
	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 12;
	asmout("JMP next_command");

unlock_area:
	EAX = cmd[12]; // x0
	ECX = cmd[16]; // y0
	ESI = cmd[20]; // x1
	EDI = cmd[24]; // y1
	CLI();
	work->lockcount--;
	if (!= 0) {
		if ((signed) EAX /* x0 */ < work->mx1) {
			if ((signed) ECX /* y0 */ < work->my1) {
				if ((signed) ESI /* x1 */ > work->mx0) {
					if ((signed) EDI /* y1 */ > work->my0) {
						work->mouselock--;
						if (== 0) {
							// マウスを移動させる時に、mouselockが0にされるので、
							// マウスが一時消去中に移動すると、これは成立しなくなる。
							// マウスが非表示中は最初のmx1の比較が成立しない
							GAPI_putmouse(); // put mouse (mouseflag = 1)
						}
					}
				}
			}
		}
		STI();
		cmd[4] = 0xffffffff; // 終了
		(offset) cmd += 28;
		asmout("JMP next_command");
	}
	work->mouselock = 0;
	if (work->mx1 != 0x80000000 /* mx1がこの値の時は、非表示を意味する */) {
		if (work->mouseflag == 0 /* mouse erased */) {
			GAPI_clippingmouse(); // mx0, my0, mx1, my1を設定
			GAPI_putmouse(); // put mouse (mouseflag = 1)
		}
	}
	STI();
	cmd[4] = 0xffffffff; // 終了
	(offset) cmd += 28;
	asmout("JMP next_command");
}

void near GAPI_mouse_backup16()
// DS:ESIからy方向に16バイトを、DS:EDIへ転送。
// ただし、どちらもVRAM内のアドレス。
// ESI, EDIは破壊されない。ALは破壊。
{
	char *b == DS:EDI, *p == DS:ESI;
	// 書き込みモード1を使って、ラッチ経由で転送
	AL = p[   0]; b[ 0] = AL;
	AL = p[ 100]; b[ 1] = AL;
	AL = p[ 200]; b[ 2] = AL;
	AL = p[ 300]; b[ 3] = AL;
	AL = p[ 400]; b[ 4] = AL;
	AL = p[ 500]; b[ 5] = AL;
	AL = p[ 600]; b[ 6] = AL;
	AL = p[ 700]; b[ 7] = AL;
	AL = p[ 800]; b[ 8] = AL;
	AL = p[ 900]; b[ 9] = AL;
	AL = p[1000]; b[10] = AL;
	AL = p[1100]; b[11] = AL;
	AL = p[1200]; b[12] = AL;
	AL = p[1300]; b[13] = AL;
	AL = p[1400]; b[14] = AL;
	AL = p[1500]; b[15] = AL;
	return;
}

void near GAPI_mouse_drawsub16()
// ES:EDIにあるパターンを、DS:ESIへ
// EAX, CLを破壊
{
	int *q == ES:EDI;
	char *p == DS:ESI;
	// 書き込みモード3でパターンを書き込む
	EAX = q[ 0];
	CL = p[   0]; p[   0] = AL;
	CL = p[ 100]; p[ 100] = AH;
	(unsigned int) EAX >>= 16;
	CL = p[ 200]; p[ 200] = AL;
	CL = p[ 300]; p[ 300] = AH;
	EAX = q[ 4];
	CL = p[ 400]; p[ 400] = AL;
	CL = p[ 500]; p[ 500] = AH;
	(unsigned int) EAX >>= 16;
	CL = p[ 600]; p[ 600] = AL;
	CL = p[ 700]; p[ 700] = AH;
	EAX = q[ 8];
	CL = p[ 800]; p[ 800] = AL;
	CL = p[ 900]; p[ 900] = AH;
	(unsigned int) EAX >>= 16;
	CL = p[1000]; p[1000] = AL;
	CL = p[1100]; p[1100] = AH;
	EAX = q[12];
	CL = p[1200]; p[1200] = AL;
	CL = p[1300]; p[1300] = AH;
	(unsigned int) EAX >>= 16;
	CL = p[1400]; p[1400] = AL;
	CL = p[1500]; p[1500] = AH;
	return;
}

void near GAPI_mouse_erasesub16()
{
	char *b == DS:EDI, *p == DS:ESI;
	// 書き込みモード1を使って、ラッチ経由で転送
	AL = b[ 0]; p[   0] = AL;
	AL = b[ 1]; p[ 100] = AL;
	AL = b[ 2]; p[ 200] = AL;
	AL = b[ 3]; p[ 300] = AL;
	AL = b[ 4]; p[ 400] = AL;
	AL = b[ 5]; p[ 500] = AL;
	AL = b[ 6]; p[ 600] = AL;
	AL = b[ 7]; p[ 700] = AL;
	AL = b[ 8]; p[ 800] = AL;
	AL = b[ 9]; p[ 900] = AL;
	AL = b[10]; p[1000] = AL;
	AL = b[11]; p[1100] = AL;
	AL = b[12]; p[1200] = AL;
	AL = b[13]; p[1300] = AL;
	AL = b[14]; p[1400] = AL;
	AL = b[15]; p[1500] = AL;
	return;
}

void near GAPI_putmouse()
// CLI状態で呼ぶ
// 破壊レジスタ：EAX, ECX, EDX, ESI, EDI
// 今のところ、mono16専用
{
	GAPI_WORK *work == ES:0x0000;
	char *b /* backup */ == DS:EDI, *p /* cursor */ == DS:ESI, *q /* pattern */ == ES:EDI;
	unsigned char maskflag == CH;

	// バックアップ
	EDX = 0x03ce;
	EAX = 0x0105;
	maskflag = work->maskflag; // 1のbitは書かない
	OUT(DX, AX); // 書き込みモード1
	work->mouseflag = /* 1 */ AH;
	(offset) p = work->cursor_addr;
	(offset) b = work->backup_addr;
	TEST(maskflag, 0x01);
	if (== 0)
		GAPI_mouse_backup16();
	(offset) p++;
	(offset) b += 16;
	TEST(maskflag, 0x02);
	if (== 0)
		GAPI_mouse_backup16();
	(offset) p++;
	(offset) b += 16;
	TEST(maskflag, 0x04);
	if (== 0)
		GAPI_mouse_backup16();

	EDX = 0x03ce;
	EAX = 0x0305;
	(offset) p -= 2;
	OUT(DX, AX); // 書き込みモード3
	EAX = 0x0003;
	OUT(DX, AX); // Data Rotate / Function Select Reg (PSET)
	EAX = work->pattern0_color; // Set/Reset Reg(AH : color, AL = 0)
	(offset) q = work->pattern0_addr;
	OUT(DX, AX);
	TEST(maskflag, 0x01);
	if (== 0)
		GAPI_mouse_drawsub16();
	(offset) q += 16;
	(offset) p++;
	TEST(maskflag, 0x02);
	if (== 0)
		GAPI_mouse_drawsub16();
	(offset) q += 16;
	(offset) p++;
	TEST(maskflag, 0x04);
	if (== 0)
		GAPI_mouse_drawsub16();

	EAX = work->pattern1_color; // Set/Reset Reg(AH : color, AL = 0)
	(offset) p -= 2;
	OUT(DX, AX);
	(offset) q += 16;
	TEST(maskflag, 0x01);
	if (== 0)
		GAPI_mouse_drawsub16();
	(offset) q += 16;
	(offset) p++;
	TEST(maskflag, 0x02);
	if (== 0)
		GAPI_mouse_drawsub16();
	(offset) q += 16;
	(offset) p++;
	TEST(maskflag, 0x04);
	if (== 0)
		GAPI_mouse_drawsub16(); // jmpに最適化するとよい
	return;
}

void near GAPI_removemouse()
// CLI状態で呼ぶ
// 破壊レジスタ：EAX, ECX, EDX, ESI, EDI
// 今のところ、mono16専用
{
	GAPI_WORK *work == ES:0x0000;
	char *b /* backup */ == DS:EDI, *p /* cursor */ == DS:ESI;
	unsigned char maskflag == CH;

	work->mouseflag = 0;

	EDX = 0x03ce;
	EAX = 0x0105;
	maskflag = work->maskflag; // 1のbitは書かない
	OUT(DX, AX); // 書き込みモード1
	(offset) b = work->backup_addr;
	(offset) p = work->cursor_addr;

	TEST(maskflag, 0x01);
	if (== 0)
		GAPI_mouse_erasesub16();
	(offset) b += 16;
	(offset) p++;
	TEST(maskflag, 0x02);
	if (== 0)
		GAPI_mouse_erasesub16();
	(offset) b += 16;
	(offset) p++;
	TEST(maskflag, 0x04);
	if (== 0)
		GAPI_mouse_erasesub16(); // jmpに最適化するとよい
	return;
}

void near GAPI_clippingmouse()
// ライン数の都合で、あまり下の方にマウスを移動させてはいけない
// ライン数可変の描画ルーチンを用意する必要がある
// (EAX, EBP) : 共に符号付き整数
// EBX以外を破壊
{
	GAPI_WORK *work == ES:0x0000;
	char *p == DS:EDI /* カーソルアドレス */, *q == ES:EAX;
	char maskflag == CL;
	signed int x == ESI, y == EBP, mouseline == EDX;

	mouseline = 16;
	maskflag = 0;
	x = work->mx;
	y = work->my;
	(offset) q = x;
	x &= /* ~0x07 */ 0xfffffff8;
	work->my0 = y;
	y += 16;
	work->mx0 = x;
	x += 24;
	work->my1 = y;
	y -= 16;
	TEST(/* (char) (offset) q */ AL, 0x07);
	/* (false) */ if (== 0) {
		x -= 8;
		maskflag = 0x04;
	}
	work->mx1 = x;
	x = (offset) q;
	(offset) q &= 0x07;
	(offset) q *= 32;
	(offset) q *= 3;
	/* (false) */ if (x < 0) {
		work->mx0 = 0;
		maskflag |= 0x01;
		if (x < 0 - 8)
			maskflag |= 0x03;
	} else /* (false) */ if (x > 800 - 16) {
		work->mx1 = 800;
		maskflag |= 0x04;
		if (x > 800 - 8)
			maskflag |= 0x06;
	}
	x /= 8;
	x += 0x000a0000;
	/* (false) */ if (y < 0) {
			work->my0 = 0;
			mouseline += y;
			(offset) q -= y;
			y = 0;
			(offset) p = 0;
			goto skip_imul;
	}
	/* (false) */ if (y > 600 - 16) {
			mouseline = 600;
			work->my1 = mouseline;
			mouseline -= y;
	}
	IMUL((offset) p, y, 100);
skip_imul:
	work->maskflag = maskflag;
	work->mouseline = mouseline;
	(offset) p += x;
	work->pattern0_addr = (offset) q;
	work->cursor_addr = (offset) p;
	return;
}

/*

// 16ライン以外のマウスカーソルルーチン

GAPI_mouse_backup_EDX	proc	near
;	// DS:ESIからy方向に16バイトを、DS:EBXへ転送。
;	// ただし、どちらもVRAM内のアドレス。
;	// ESI, EBXは破壊される。
;	char *b == DS:EBX, *p == DS:ESI;

			mov	ecx,edx
#loop:
			mov	 al, byte ptr ds:[esi]
			add	esi,100
			mov	 byte ptr ds:[ebx], al
			inc	ebx
			dec	ecx
			jnz	short #loop
			ret

GAPI_mouse_backup_EDX	endp

GAPI_mouse_drawsub_DL	proc	near
;	// ES:EDIにあるパターンを、DS:ESIへ
;	char *q == ES:EDI, *p == DS:ESI;

			movzx	ecx, dl
#loop:
			mov	 ah, byte ptr ds:[esi]
			mov	 al, byte ptr es:[edi]
			inc	edi
			mov	 byte ptr ds:[esi], al
			add	esi,100
			dec	ecx
			jnz	short #loop
			ret

GAPI_mouse_drawsub_DL	endp

GAPI_mouse_erasesub_EDX	proc	near
;	char *b == DS:EBX, *p == DS:ESI;

			mov	ecx,edx
#loop:
			mov	 al, byte ptr ds:[ebx]
			inc	ebx
			mov	 byte ptr ds:[esi], al
			add	esi,100
			dec	ecx
			jnz	short #loop
			ret

GAPI_mouse_erasesub_EDX	endp

*/


