segment CODE(USE32, PARA);
default(code == CODE);

void header()
{
	DB(0x47, 0x01, 0x05);
}

void puthex();

void main()
{
	//	CALL([ESI]);
	DB(0x38, 0x65, 0x08, 0x84);
	DB(0x86, 0x00, 0x45, 0x13);
	asmout("DB ' ','offset  ',0x00");
	AL = 0x10;
	do {
		CALL([ESI]);
		DB(0x55, 0x3a, 0x0a, 0xb6, 0xb8);
		EAX++;
	} while (AL != 0x20);
	CALL([ESI]);
	DB(0x51, 0x20, 0x20, 0x00);
	AL = 0x10;
	do {
		CALL([ESI]);
		DB(0x55, 0x16, 0xb8);
		EAX++;
	} while (AL != 0x20);
	CALL([ESI]);
	asmout("DB 0x51, 0x0a, '---------------------------------------------------------------------------', 0x0a, 0x00");
	for (;;) {
		CALL([ESI]);
		DB(0x7b, 0x99, 0x80, 0x40, 0x42, 0x90,0x85, 0x20);
		TEST(EBP, EBP);
		if (== 0)
			break;
		EAX = ECX;
		ROL(EAX, 8);
		puthex();
		ROL(EAX, 8);
		puthex();
		ROL(EAX, 8);
		puthex();
		ROL(EAX, 8);
		puthex();
		CALL([ESI]);
		DB(0x51, 0x20, 0x20, 0x00);
		EBX = 0;
		do {
            if ((unsigned) EBX < EBP) {
				AL = [EDX+EBX];
				puthex();
			} else {
				CALL([ESI]);
				DB(0x51, 0x20, 0x20, 0x00);
			}
			CALL([ESI]);
			DB(0x51, 0x20, 0x00);
			EBX++;
		} while (BL != 0x10);
		CALL([ESI]);
		DB(0x51, 0x20, 0x00);
		EBX = 0;
		do {
            if ((unsigned) EBX < EBP) {
				AL = [EDX+EBX];
				AH = 0x2e;
				if ((unsigned) AL >= 0x20) {
					if ((unsigned) AL <= 0x7e)
						AH = AL;
				}
				CALL([ESI]);
				DB(0x55, 0x16, 0xbc);
			}
			EBX++;
		} while (BL != 0x10);
		CALL([ESI]);
		DB(0x51, 0x0a, 0x00);
		ECX += 0x10;
	}
	return;
}

void puthex()
{
	PUSH(EAX);
	AH = AL;
	AL >>= 4;
	AX &= 0x0f0f;
	AX |= 0x1010;
	CALL([ESI]);
	DB(0x55, 0x26, 0xb8, 0x6b, 0xc0);
	POP(EAX);
//	return;
}
